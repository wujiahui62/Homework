help("read.csv")
?read.csv
data <- read.csv(file.choose(), header = TRUE)
data <- read.csv(file.choose(), header = TRUE)
options(max.print = 100000)
data1 <- read.csv(file.choose(), header = true)
write.table(data1, file = "/Users/jiahuiwu/Desktop/CIS660/lab1/VTargetBuyers_TF.txt",
col.names = TRUE)
setwd("/Users/jiahuiwu/Desktop/CIS660/lab4")
options(max.print = 100000)
data1 <- read.csv("featureselect.csv", header = TRUE)
dim(data1)
setwd("/Users/jiahuiwu/Desktop/CIS660/lab4")
is.null(data1)
names(data1)
help(c50)
help(c5.0)
help(C5.0)
data1 <- read.csv("bikebuyer.csv", header = TRUE)
C50_model2 = C5.0(training_data[, -9], y=as.factor(training_data[, 9]),
control = C5.0Control(earlyStopping = FALSE))
C50_pre2 = predict(C50_model2, testing_data)
table(testing_data[, 9], Predicted = C50_pre2)
x <- data1$YearlyIncome
a = min(x)
b = max(x)
newIncome <- function(x){(x - a) / (b - a)}
data1$YearlyIncome <- apply(data1[2], 2, newIncome)
cuts <- cut(data1$Age, breaks = c(30, 40, 50, 60, 70, 102),
label = c(30, 40, 50, 60, 70),
right = FALSE)
data1$Age <- cuts
data1$CommuteDistance <- as.character(data1$CommuteDistance)
data1$CommuteDistance[which(data1$CommuteDistance == "0-1 Miles")] <- "1"
data1$CommuteDistance[which(data1$CommuteDistance == "1-2 Miles")] <- "2"
data1$CommuteDistance[which(data1$CommuteDistance == "2-5 Miles")] <- "3"
data1$CommuteDistance[which(data1$CommuteDistance == "5-10 Miles")] <- "4"
data1$CommuteDistance[which(data1$CommuteDistance == "10+ Miles")] <- "5"
data1$CommuteDistance <- as.numeric(data1$CommuteDistance)
set.seed(2)
train = sample(1:nrow(data1), nrow(data1) * 0.7)
test = -train
training_data = data1[train,]
testing_data = data1[test,]
head(test_buy_data)
library(C50)
C50_model1 = C5.0(training_data[, -9], as.factor(training_data[, 9]))
C50_pre1 = predict(C50_model1, testing_data)
table(testing_data[, 9], Predicted = C50_pre1)
t = table(testing_data[, 9], Predicted = C50_pre1)
t
a = t[3, 2]
a
as.vector(t)
b = as.vector(t)
b
b[1]
b[2]
data1 <- read.csv("featureselect.csv", header = TRUE)
setwd("/Users/jiahuiwu/Desktop/CIS660/lab4")
options(max.print = 100000)
data1 <- read.csv("featureselect.csv", header = TRUE)
str(data1)
names(data1)
dim(data1)
is.null(data1)
MaxAccuracy = 0
for(i in 13: 2){
data <- data1[, c(1, i)]
hea(data)
}
setwd("/Users/jiahuiwu/Desktop/CIS660/lab4")
for(i in 13: 2){
data <- data1[, c(1, i)]
head(data)
}
MaxAccuracy = 0
for(i in 13: 2){
data <- data1[, c(1, i)]
names(data)
}
MaxAccuracy = 0
for(i in 1: 12){
data <- data1[, c(1, i)]
names(data)
}
for(i in 1: 12){
data <- data1[, c(1, i)]
print(names(data))
}
for(i in 13: 2){
data <- data1[, c(, i)]
print(names(data))
}
setwd("/Users/jiahuiwu/Desktop/CIS660/lab4")
for(i in 13: 2){
data <- data1[, c(1-i)]
print(names(data))
}
for(i in 2: 13){
data <- data1[, c(1-i)]
print(names(data))
}
for(i in 2: 3){
data <- data1[, c(1-i)]
print(names(data))
}
MaxAccuracy = 0
for(i in 2: 3){
data <- data1[, c(1:i)]
print(names(data))
}
MaxAccuracy = 0
for(i in 13: 2){
data <- data1[, c(1:i)]
print(names(data))
}
MaxAccuracy = 0
BestFeature = 13
for(i in 13: 2){
data <- data1[, c(1:i)]
print(names(data))
}
for(i in 13: 2){
data <- data1[, c(1:i)]
library(C5.0)
model = C5.0(data[, c(-1)], y=as.factor(data[, i]),
control = C5.0Control(earlyStopping = FALSE))
}
install.packages(C5.0)
install.packages("C5.0")
install.packages("C50")
install.packages("C50")
MaxAccuracy = 0
BestFeature = 13
for(i in 13: 2){
data <- data1[, c(1:i)]
library(C50)
model = C5.0(data[, c(-1)], y=as.factor(data[, i]),
control = C5.0Control(earlyStopping = FALSE))
}
x <- data1$YearlyIncome
a = min(x)
b = max(x)
newIncome <- function(x){(x - a) / (b - a)}
data1$YearlyIncome <- apply(data1[2], 2, newIncome)
cuts <- cut(data1$Age, breaks = c(30, 40, 50, 60, 70, 102),
label = c(30, 40, 50, 60, 70),
right = FALSE)
data1$Age <- cuts
data1$CommuteDistance <- as.character(data1$CommuteDistance)
data1$CommuteDistance[which(data1$CommuteDistance == "0-1 Miles")] <- "1"
data1$CommuteDistance[which(data1$CommuteDistance == "1-2 Miles")] <- "2"
data1$CommuteDistance[which(data1$CommuteDistance == "2-5 Miles")] <- "3"
data1$CommuteDistance[which(data1$CommuteDistance == "5-10 Miles")] <- "4"
data1$CommuteDistance[which(data1$CommuteDistance == "10+ Miles")] <- "5"
data1$CommuteDistance <- as.numeric(data1$CommuteDistance)
head(data1)
data1 <- read.csv("featureselect.csv", header = TRUE)
head(data1)
set.seed(2)
train = sample(1:nrow(data1), nrow(data1) * 0.7)
test = -train
training_data = data1[train,]
testing_data = data1[test,]
for(i in 13: 2){
data <- data1[, c(1:i)]
library(C50)
model = C5.0(training_data[, -1], y=as.factor(training_data[, 1]),
control = C5.0Control(earlyStopping = FALSE))
pred = predict(model, testing_data)
table = table(testing_data[, 1], Predicted = pred)
}
for(i in 13: 2){
data <- data1[, c(1:i)]
library(C50)
model = C5.0(training_data[, -1], y=as.factor(training_data[, 1]),
control = C5.0Control(earlyStopping = FALSE))
pred = predict(model, testing_data)
table = table(testing_data[, 1], Predicted = pred)
print(table)
}
for(i in 13: 2){
data <- data1[, c(1:i)]
library(C50)
model = C5.0(training_data[, -1], as.factor(training_data[, 1]))
pred = predict(model, testing_data)
table = table(testing_data[, 1], Predicted = pred)
print(table)
}
for(i in 13: 2){
data <- data1[, c(1:i)]
library(C50)
model = C5.0(training_data[, -1], as.factor(training_data[, 1]))
pred = predict(model, testing_data)
table = table(testing_data[, 1], Predicted = pred)
print(table)
print(names(data))
}
for(i in 13: 2){
data <- data1[, c(1:i)]
library(C50)
model = C5.0(training_data[, -1], as.factor(training_data[, 1]))
pred = predict(model, testing_data)
table = table(testing_data[, 1], Predicted = pred)
print(table)
print(head(data))
}
for(i in 13: 2){
data <- data1[, c(1:i)]
set.seed(2)
train = sample(1:nrow(data), nrow(data) * 0.7)
test = -train
training_data = data1[train,]
testing_data = data1[test,]
library(C50)
model = C5.0(training_data[, -1], as.factor(training_data[, 1]))
pred = predict(model, testing_data)
table = table(testing_data[, 1], Predicted = pred)
print(table)
print(head(data))
}
for(i in 13: 2){
data <- data1[, c(1:i)]
set.seed(2)
train = sample(1:nrow(data), nrow(data) * 0.7)
test = -train
training_data = data1[train,]
testing_data = data1[test,]
library(C50)
model = C5.0(training_data[, -1], as.factor(training_data[, 1]))
pred = predict(model, testing_data)
table = table(testing_data[, 1], Predicted = pred)
print(table)
}
for(i in 13: 2){
data <- data1[, c(1:i)]
set.seed(2)
train = sample(1:nrow(data), nrow(data) * 0.7)
test = -train
training_data = data1[train,]
testing_data = data1[test,]
print(head(training_data))}
for(i in 13: 2){
data <- data1[, c(1:i)]
set.seed(2)
train = sample(1:nrow(data), nrow(data) * 0.7)
test = -train
training_data = data1[train,]
testing_data = data1[test,]
print(head(training_data))}
for(i in 13: 2){
data <- data1[, c(1:i)]
library(C50)
model = C5.0(data[1:12000, -1], as.factor(data[1:12000, 1]))
pred = predict(model, data[12000:18484,])
table = table(data[12000:18484, 1], Predicted = pred)
print(table)
}
model = C5.0(data[1:12000,2], as.factor(data[1:12000, 1]))
model = C5.0(data[1:12000,2:3], as.factor(data[1:12000, 1]))
model = C5.0(data[1:12000,c(2, 3)], as.factor(data[1:12000, 1]))
model = C5.0(data[1:12000,2:5], as.factor(data[1:12000, 1]))
model = C5.0(data[1:12000, -1], as.factor(data[1:12000, 1]))
model = C5.0(data1[1:12000, -1], as.factor(data1[1:12000, 1]))
model = C5.0(data1[1:12000, 2], as.factor(data1[1:12000, 1]))
model = C5.0(data1[1:12000, 2:3], as.factor(data1[1:12000, 1]))
for(i in 13: 3){
data <- data1[, c(1:i)]
library(C50)
model = C5.0(data[1:12000, -1], as.factor(data[1:12000, 1]))
pred = predict(model, data[12000:18484,])
table = table(data[12000:18484, 1], Predicted = pred)
print(table)
}
for(i in 13: 3){
data <- data1[, c(1:i)]
library(C50)
model = C5.0(data[1:12000, -1], as.factor(data[1:12000, 1]))
pred = predict(model, data[12000:18484,])
table = table(data[12000:18484, 1], Predicted = pred)
a = as.vector(table[1])
print(a)
print(table)
}
for(i in 13: 3){
data <- data1[, c(1:i)]
library(C50)
model = C5.0(data[1:12000, -1], as.factor(data[1:12000, 1]))
pred = predict(model, data[12000:18484,])
table = table(data[12000:18484, 1], Predicted = pred)
a = as.vector(table[1])
b = as.vector(table[2])
c = as.vector(table[3])
d = as.vector(table[4])
print(a)
print(b)
print(c)
print(d)
print(table)
}
maxAccuracy = 0
bestFeature = 13
for(i in 13: 3){
data <- data1[, c(1:i)]
library(C50)
model = C5.0(data[1:12000, -1], as.factor(data[1:12000, 1]))
pred = predict(model, data[12000:18484,])
table = table(data[12000:18484, 1], Predicted = pred)
a = as.vector(table[1])
b = as.vector(table[2])
c = as.vector(table[3])
d = as.vector(table[4])
currAccu = (a + d) / (a + b + c + d)
if(currAccu > maxAccuracy){
maxAccuracy = currAccu
bestFeature = i
}
print(maxAccuracy)
print(bestFeature)
}
model = C5.0(data1[1:12000, -1], as.factor(data1[1:12000, 1]))
pred = predict(model, data1[12000:18484,])
table = table(data1[12000:18484, 1], Predicted = pred)
a = as.vector(table[1])
b = as.vector(table[2])
c = as.vector(table[3])
d = as.vector(table[4])
a
b
c
d
model = C5.0(data1[1:12000, -1], as.factor(data1[1:12000, 1]))
pred = predict(model, data1[12000:18484,])
table = table(data1[12000:18484, 1], Predicted = pred)
a = as.vector(table[1])
b = as.vector(table[2])
c = as.vector(table[3])
d = as.vector(table[4])
table
a
b
c
d
for(i in 13: 3){
data <- data1[, c(1:i)]
print(names[data])}
for(i in 13: 3){
data <- data1[, c(1:i)]
print(names(data)}
for(i in 13: 3){
data <- data1[, c(1:i)]
print(names(data)
}
for(i in 13: 3){
data <- data1[, c(1:i)]
print(names(data))
}
maxAccuracy = 0
bestFeature = 13
for(i in 13: 3){
data <- data1[, c(1:i)]
print(names(data))
library(C50)
model = C5.0(data[1:12000, -1], as.factor(data[1:12000, 1]))
pred = predict(model, data[12000:18484,])
table = table(data[12000:18484, 1], Predicted = pred)
a = as.vector(table[1])
b = as.vector(table[2])
c = as.vector(table[3])
d = as.vector(table[4])
currAccu = (a + d) / (a + b + c + d)
if(currAccu > maxAccuracy){
maxAccuracy = currAccu
bestFeature = i
}
}
maxAccuracy = 0
bestFeature = 13
for(i in 13: 3){
data <- data1[, c(1:i)]
library(C50)
model = C5.0(data[1:12000, -1], as.factor(data[1:12000, 1]))
pred = predict(model, data[12000:18484,])
table = table(data[12000:18484, 1], Predicted = pred)
a = as.vector(table[1])
b = as.vector(table[2])
c = as.vector(table[3])
d = as.vector(table[4])
currAccu = (a + d) / (a + b + c + d)
if(currAccu > maxAccuracy){
maxAccuracy = currAccu
bestFeature = i
}
}
print(maxAccuracy)
print(bestFeature)
maxAccuracy = 0
bestFeature = 13
for(i in 13: 3){
data <- data1[, c(1:i)]
library(rpart)
model = rpart(BikeBuyer ~., data[1:12000,], method = "class",
control = rpart.control(cp = 0))
pred = predict(model, data[12000:18484], type="class")
table = table(data[12000:18484, 1], Predicted = pred)
a = as.vector(table[1])
b = as.vector(table[2])
c = as.vector(table[3])
d = as.vector(table[4])
currAccu = (a + d) / (a + b + c + d)
if(currAccu > maxAccuracy){
maxAccuracy = currAccu
bestFeature = i
}
}
print(maxAccuracy)
print(bestFeature)
maxAccuracy = 0
bestFeature = 13
for(i in 13: 3){
data <- data1[, c(1:i)]
library(rpart)
model = rpart(BikeBuyer ~., data[1:12000,], method = "class",
control = rpart.control(cp = 0))
pred = predict(model, data[12000:18484,], type="class")
table = table(data[12000:18484, 1], Predicted = pred)
a = as.vector(table[1])
b = as.vector(table[2])
c = as.vector(table[3])
d = as.vector(table[4])
currAccu = (a + d) / (a + b + c + d)
if(currAccu > maxAccuracy){
maxAccuracy = currAccu
bestFeature = i
}
}
print(maxAccuracy)
print(bestFeature)
#initialize maximum accuracy to 0, best features to 13
maxAccuracy = 0
bestFeature = 13
#start a for loop to loop the attribute
for(i in 13: 3){
#each time assign column 1-i to data
data <- data1[, c(1:i)]
library(C50)
model = C5.0(data[1:12000, -1], as.factor(data[1:12000, 1]))
pred = predict(model, data[12000:18484,])
#confusion table
table = table(data[12000:18484, 1], Predicted = pred)
a = as.vector(table[1])
b = as.vector(table[2])
c = as.vector(table[3])
d = as.vector(table[4])
#calculate current accuracy
currAccu = (a + d) / (a + b + c + d)
#if current accuracy > max accuracy, update maxAccuracy and bestFeature
if(currAccu > maxAccuracy){
maxAccuracy = currAccu
bestFeature = i
}
}
print(maxAccuracy)
print(bestFeature)
